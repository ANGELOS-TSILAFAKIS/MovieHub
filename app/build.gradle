apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        applicationId "com.etiennelawlor.moviehub"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 3
        versionName "0.0.3"
        // Enabling multidex support.
        multiDexEnabled true
//        multiDexKeepProguard file('multidex-keep.txt')
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree('proguard').asList().toArray()
        }
        debug {
            debuggable true
            minifyEnabled false
            // Run code coverage reports by default on debug builds.
            // Causes issue with debugger
//            testCoverageEnabled = true
            // Turns off code coverage but doesn't mess with debugger
            testCoverageEnabled = false
        }
    }
    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // Encapsulates options for running tests.
    testOptions {
        // Encapsulates options for unit tests.
        unitTests {
            // Encapsulates options for controlling how Gradle executes unit tests.
            all {
                // Always show the result of every unit test, even if it passes.
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }
    buildToolsVersion '26.0.2'
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.squareup.picasso:picasso:$rootProject.picassoVersion"
    compile "com.squareup.retrofit2:retrofit:$rootProject.retrofit2Version"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.retrofit2Version"
    compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.retrofit2Version"
    compile "com.squareup.okhttp3:okhttp:$rootProject.okhttp3Version"
    compile "com.squareup.okhttp3:mockwebserver:$rootProject.okhttp3Version"
    compile "com.squareup.okhttp3:okhttp-urlconnection:$rootProject.okhttp3Version"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp3Version"
    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"

    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:palette-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
//    apt 'com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion'
    compile "com.jakewharton.timber:timber:$rootProject.timberVersion"

    compile "jp.wasabeef:recyclerview-animators:$rootProject.recyclerviewAnimatorsVersion" // Stable

    compile "com.github.lawloretienne:trestle:$rootProject.trestleVersion"

    compile "com.android.support:multidex:$rootProject.multidexVersion" //

    compile "io.reactivex:rxjava:$rootProject.rxjavaVersion" // RxJava // Should update at some point
    compile "io.reactivex.rxjava2:rxjava:$rootProject.rxjava2Version" // RxJava // Should update at some point
    compile "io.reactivex:rxandroid:$rootProject.rxandroidVersion" // RxAndroid providing Android Scheduler // Should update at some point
    compile "io.reactivex.rxjava2:rxandroid:$rootProject.rxjava2RxandroidVersion" // RxAndroid providing Android Scheduler // Should update at some point
    compile "com.jakewharton.rxbinding:rxbinding:$rootProject.rxbindingVersion" // RxBinding

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.powerMockito"

    // Required for instrumented tests
    androidTestCompile "com.android.support:support-annotations:$rootProject.supportAnnotations"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.rulesVersion"

    // Espresso UI Testing dependencies.
//    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    compile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"


    // UI testing with UI Automator
//    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}